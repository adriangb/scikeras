{
 "cells": [
  {
   "cell_type": "raw",
   "id": "7b9fdd51",
   "metadata": {},
   "source": [
    "<a href=\"https://colab.research.google.com/github/adriangb/scikeras/blob/docs-deploy/refs/heads/master/notebooks/Benchmarks.ipynb\"><img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\">Run in Google Colab</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff4a7ceb",
   "metadata": {},
   "source": [
    "# SciKeras Benchmarks\n",
    "\n",
    "SciKeras wraps Keras Models, but does not alter their performance since all of the heavy lifting still happens within Keras/Tensorflow. In this notebook, we compare the performance and accuracy of a pure-Keras Model to the same model wrapped in SciKeras.\n",
    "\n",
    "## Table of contents\n",
    "\n",
    "* [1. Setup](#1.-Setup)\n",
    "* [2. Dataset](#2.-Dataset)\n",
    "* [3. Define Keras Model](#3.-Define-Keras-Model)\n",
    "* [4. Keras benchmarks](#4.-Keras-benchmarks)\n",
    "* [5. SciKeras benchmark](#5.-SciKeras-benchmark)\n",
    "\n",
    "## 1. Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "97b98e06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-30T17:39:15.943433Z",
     "iopub.status.busy": "2021-08-30T17:39:15.942555Z",
     "iopub.status.idle": "2021-08-30T17:39:18.205340Z",
     "shell.execute_reply": "2021-08-30T17:39:18.206192Z"
    }
   },
   "outputs": [],
   "source": [
    "try:\n",
    "    import scikeras\n",
    "except ImportError:\n",
    "    !python -m pip install scikeras"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5eb8f93",
   "metadata": {},
   "source": [
    "Silence TensorFlow logging to keep output succinct."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ecf00a37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-30T17:39:18.210131Z",
     "iopub.status.busy": "2021-08-30T17:39:18.209100Z",
     "iopub.status.idle": "2021-08-30T17:39:18.214615Z",
     "shell.execute_reply": "2021-08-30T17:39:18.215756Z"
    }
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "from tensorflow import get_logger\n",
    "get_logger().setLevel('ERROR')\n",
    "warnings.filterwarnings(\"ignore\", message=\"Setting the random state for TF\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1bb1e626",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-30T17:39:18.219598Z",
     "iopub.status.busy": "2021-08-30T17:39:18.219068Z",
     "iopub.status.idle": "2021-08-30T17:39:18.604073Z",
     "shell.execute_reply": "2021-08-30T17:39:18.602734Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scikeras.wrappers import KerasClassifier, KerasRegressor\n",
    "from tensorflow import keras"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e34afa3b",
   "metadata": {},
   "source": [
    "## 2. Dataset\n",
    "\n",
    "We will be using the MNIST dataset available within Keras."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8a8ee835",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-30T17:39:18.610628Z",
     "iopub.status.busy": "2021-08-30T17:39:18.610115Z",
     "iopub.status.idle": "2021-08-30T17:39:19.163707Z",
     "shell.execute_reply": "2021-08-30T17:39:19.162664Z"
    }
   },
   "outputs": [],
   "source": [
    "(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()\n",
    "# Scale images to the [0, 1] range\n",
    "x_train = x_train.astype(\"float32\") / 255\n",
    "x_test = x_test.astype(\"float32\") / 255\n",
    "# Make sure images have shape (28, 28, 1)\n",
    "x_train = np.expand_dims(x_train, -1)\n",
    "x_test = np.expand_dims(x_test, -1)\n",
    "# Reduce dataset size for faster benchmarks\n",
    "x_train, y_train = x_train[:2000], y_train[:2000]\n",
    "x_test, y_test = x_test[:500], y_test[:500]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffdc5726",
   "metadata": {},
   "source": [
    "## 3. Define Keras Model\n",
    "\n",
    "Next we will define our Keras model (adapted from [keras.io](https://keras.io/examples/vision/mnist_convnet/)):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b9057aa1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-30T17:39:19.171926Z",
     "iopub.status.busy": "2021-08-30T17:39:19.171307Z",
     "iopub.status.idle": "2021-08-30T17:39:19.175035Z",
     "shell.execute_reply": "2021-08-30T17:39:19.175454Z"
    }
   },
   "outputs": [],
   "source": [
    "num_classes = 10\n",
    "input_shape = (28, 28, 1)\n",
    "\n",
    "\n",
    "def get_model():\n",
    "    model = keras.Sequential(\n",
    "        [\n",
    "            keras.Input(input_shape),\n",
    "            keras.layers.Conv2D(32, kernel_size=(3, 3), activation=\"relu\"),\n",
    "            keras.layers.MaxPooling2D(pool_size=(2, 2)),\n",
    "            keras.layers.Conv2D(64, kernel_size=(3, 3), activation=\"relu\"),\n",
    "            keras.layers.MaxPooling2D(pool_size=(2, 2)),\n",
    "            keras.layers.Flatten(),\n",
    "            keras.layers.Dropout(0.5),\n",
    "            keras.layers.Dense(num_classes, activation=\"softmax\"),\n",
    "        ]\n",
    "    )\n",
    "    model.compile(\n",
    "        loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\"\n",
    "    )\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "947a445e",
   "metadata": {},
   "source": [
    "## 4. Keras benchmarks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4b20044f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-30T17:39:19.180290Z",
     "iopub.status.busy": "2021-08-30T17:39:19.179767Z",
     "iopub.status.idle": "2021-08-30T17:39:19.182997Z",
     "shell.execute_reply": "2021-08-30T17:39:19.183447Z"
    }
   },
   "outputs": [],
   "source": [
    "fit_kwargs = {\"batch_size\": 128, \"validation_split\": 0.1, \"verbose\": 0, \"epochs\": 5}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d20ef100",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-30T17:39:19.189027Z",
     "iopub.status.busy": "2021-08-30T17:39:19.187822Z",
     "iopub.status.idle": "2021-08-30T17:39:19.189652Z",
     "shell.execute_reply": "2021-08-30T17:39:19.190101Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "from scikeras._utils import TFRandomState"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3dcde0ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-30T17:39:19.197332Z",
     "iopub.status.busy": "2021-08-30T17:39:19.194836Z",
     "iopub.status.idle": "2021-08-30T17:39:27.711739Z",
     "shell.execute_reply": "2021-08-30T17:39:27.712631Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training time: 8.15\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.882\n"
     ]
    }
   ],
   "source": [
    "from time import time\n",
    "\n",
    "with TFRandomState(seed=0):  # we force a TF random state to be able to compare accuracy\n",
    "    model = get_model()\n",
    "    start = time()\n",
    "    model.fit(x_train, y_train, **fit_kwargs)\n",
    "    print(f\"Training time: {time()-start:.2f}\")\n",
    "    y_pred = np.argmax(model.predict(x_test), axis=1)\n",
    "print(f\"Accuracy: {accuracy_score(y_test, y_pred)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c111e0a",
   "metadata": {},
   "source": [
    "## 5. SciKeras benchmark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4d49a6ba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-30T17:39:27.716261Z",
     "iopub.status.busy": "2021-08-30T17:39:27.715150Z",
     "iopub.status.idle": "2021-08-30T17:39:27.719820Z",
     "shell.execute_reply": "2021-08-30T17:39:27.720459Z"
    }
   },
   "outputs": [],
   "source": [
    "clf = KerasClassifier(\n",
    "    model=get_model,\n",
    "    random_state=0,\n",
    "    **fit_kwargs\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8bc0672a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-08-30T17:39:27.723923Z",
     "iopub.status.busy": "2021-08-30T17:39:27.722548Z",
     "iopub.status.idle": "2021-08-30T17:39:38.245192Z",
     "shell.execute_reply": "2021-08-30T17:39:38.246077Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training time: 10.29\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.882\n"
     ]
    }
   ],
   "source": [
    "start = time()\n",
    "clf.fit(x_train, y_train)\n",
    "print(f\"Training time: {time()-start:.2f}\")\n",
    "y_pred = clf.predict(x_test)\n",
    "print(f\"Accuracy: {accuracy_score(y_test, y_pred)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b104018f",
   "metadata": {},
   "source": [
    "As you can see, the overhead for SciKeras is <1 sec, and the accuracy is identical."
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
