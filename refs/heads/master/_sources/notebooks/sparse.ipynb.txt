{
 "cells": [
  {
   "cell_type": "raw",
   "id": "faec5a77",
   "metadata": {},
   "source": [
    "<a href=\"https://colab.research.google.com/github/adriangb/scikeras/blob/docs-deploy/refs/heads/master/notebooks/AutoEncoders.ipynb\"><img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\">Run in Google Colab</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bc9e19f",
   "metadata": {},
   "source": [
    "# Sparse Inputs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd06fcbb",
   "metadata": {},
   "source": [
    "SciKeras supports sparse inputs (`X`/features).\n",
    "You don't have to do anything special for this to work, you can just pass a sparse matrix to `fit()`.\n",
    "\n",
    "In this notebook, we'll demonstrate how this works and compare memory consumption of sparse inputs to dense inputs."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6712217a",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3e76c93e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-10T01:20:05.294052Z",
     "iopub.status.busy": "2024-04-10T01:20:05.293739Z",
     "iopub.status.idle": "2024-04-10T01:20:08.536948Z",
     "shell.execute_reply": "2024-04-10T01:20:08.536097Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting memory_profiler\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Downloading memory_profiler-0.61.0-py3-none-any.whl.metadata (20 kB)\r\n",
      "Requirement already satisfied: psutil in /home/runner/work/scikeras/scikeras/.venv/lib/python3.12/site-packages (from memory_profiler) (5.9.8)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading memory_profiler-0.61.0-py3-none-any.whl (31 kB)\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Installing collected packages: memory_profiler\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully installed memory_profiler-0.61.0\r\n"
     ]
    }
   ],
   "source": [
    "!pip install memory_profiler\n",
    "%load_ext memory_profiler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "73f581d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-10T01:20:08.541053Z",
     "iopub.status.busy": "2024-04-10T01:20:08.540457Z",
     "iopub.status.idle": "2024-04-10T01:20:10.809250Z",
     "shell.execute_reply": "2024-04-10T01:20:10.808575Z"
    }
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "import os\n",
    "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n",
    "from tensorflow import get_logger\n",
    "get_logger().setLevel('ERROR')\n",
    "warnings.filterwarnings(\"ignore\", message=\"Setting the random state for TF\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "185bd96a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-10T01:20:10.813221Z",
     "iopub.status.busy": "2024-04-10T01:20:10.812541Z",
     "iopub.status.idle": "2024-04-10T01:20:10.818135Z",
     "shell.execute_reply": "2024-04-10T01:20:10.817512Z"
    }
   },
   "outputs": [],
   "source": [
    "try:\n",
    "    import scikeras\n",
    "except ImportError:\n",
    "    !python -m pip install scikeras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1406aacc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-10T01:20:10.821097Z",
     "iopub.status.busy": "2024-04-10T01:20:10.820551Z",
     "iopub.status.idle": "2024-04-10T01:20:11.193960Z",
     "shell.execute_reply": "2024-04-10T01:20:11.193206Z"
    }
   },
   "outputs": [],
   "source": [
    "import scipy\n",
    "import numpy as np\n",
    "from scikeras.wrappers import KerasRegressor\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.pipeline import Pipeline\n",
    "import keras"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf14426c",
   "metadata": {},
   "source": [
    "## Data\n",
    "\n",
    "The dataset we'll be using is designed to demostrate a worst-case/best-case scenario for dense and sparse input features respectively.\n",
    "It consists of a single categorical feature with equal number of categories as rows.\n",
    "This means the one-hot encoded representation will require as many columns as it does rows, making it very ineffienct to store as a dense matrix but very efficient to store as a sparse matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5e77f3ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-10T01:20:11.196881Z",
     "iopub.status.busy": "2024-04-10T01:20:11.196469Z",
     "iopub.status.idle": "2024-04-10T01:20:11.200730Z",
     "shell.execute_reply": "2024-04-10T01:20:11.200125Z"
    }
   },
   "outputs": [],
   "source": [
    "N_SAMPLES = 20_000  # hand tuned to be ~4GB peak\n",
    "\n",
    "X = np.arange(0, N_SAMPLES).reshape(-1, 1)\n",
    "y = np.random.uniform(0, 1, size=(X.shape[0],))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b6f0a57",
   "metadata": {},
   "source": [
    "## Model\n",
    "\n",
    "The model here is nothing special, just a basic multilayer perceptron with one hidden layer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7cdcf283",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-10T01:20:11.203648Z",
     "iopub.status.busy": "2024-04-10T01:20:11.203175Z",
     "iopub.status.idle": "2024-04-10T01:20:11.208358Z",
     "shell.execute_reply": "2024-04-10T01:20:11.207713Z"
    }
   },
   "outputs": [],
   "source": [
    "def get_clf(meta) -> keras.Model:\n",
    "    n_features_in_ = meta[\"n_features_in_\"]\n",
    "    model = keras.models.Sequential()\n",
    "    model.add(keras.layers.Input(shape=(n_features_in_,)))\n",
    "    # a single hidden layer\n",
    "    model.add(keras.layers.Dense(100, activation=\"relu\"))\n",
    "    model.add(keras.layers.Dense(1))\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d484f3c",
   "metadata": {},
   "source": [
    "## Pipelines\n",
    "\n",
    "Here is where it gets interesting.\n",
    "We make two Scikit-Learn pipelines that use `OneHotEncoder`: one that uses `sparse_output=False` to force a dense matrix as the output and another that uses `sparse_output=True` (the default)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0be9194e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-10T01:20:11.211343Z",
     "iopub.status.busy": "2024-04-10T01:20:11.210773Z",
     "iopub.status.idle": "2024-04-10T01:20:11.215599Z",
     "shell.execute_reply": "2024-04-10T01:20:11.215032Z"
    }
   },
   "outputs": [],
   "source": [
    "dense_pipeline = Pipeline(\n",
    "    [\n",
    "        (\"encoder\", OneHotEncoder(sparse_output=False)),\n",
    "        (\"model\", KerasRegressor(get_clf, loss=\"mse\", epochs=5, verbose=False))\n",
    "    ]\n",
    ")\n",
    "\n",
    "sparse_pipeline = Pipeline(\n",
    "    [\n",
    "        (\"encoder\", OneHotEncoder(sparse_output=True)),\n",
    "        (\"model\", KerasRegressor(get_clf, loss=\"mse\", epochs=5, verbose=False))\n",
    "    ]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ed6136e",
   "metadata": {},
   "source": [
    "## Benchmark\n",
    "\n",
    "Our benchmark will be to just train each one of these pipelines and measure peak memory consumption."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "42b6259a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-10T01:20:11.218014Z",
     "iopub.status.busy": "2024-04-10T01:20:11.217795Z",
     "iopub.status.idle": "2024-04-10T01:20:45.799837Z",
     "shell.execute_reply": "2024-04-10T01:20:45.799138Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "peak memory: 5189.37 MiB, increment: 4669.04 MiB\n"
     ]
    }
   ],
   "source": [
    "%memit dense_pipeline.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "df00d7e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-10T01:20:45.802427Z",
     "iopub.status.busy": "2024-04-10T01:20:45.801962Z",
     "iopub.status.idle": "2024-04-10T01:21:02.933141Z",
     "shell.execute_reply": "2024-04-10T01:21:02.932375Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "peak memory: 992.88 MiB, increment: 33.56 MiB\n"
     ]
    }
   ],
   "source": [
    "%memit sparse_pipeline.fit(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc4f695d",
   "metadata": {},
   "source": [
    "You should see at least 100x more memory consumption **increment** in the dense pipeline."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00df36b2",
   "metadata": {},
   "source": [
    "### Runtime\n",
    "\n",
    "Using sparse inputs can have a drastic impact on memory usage, but it often (not always) hurts overall runtime."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4a1ff92b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-10T01:21:02.936131Z",
     "iopub.status.busy": "2024-04-10T01:21:02.935592Z",
     "iopub.status.idle": "2024-04-10T01:25:49.290465Z",
     "shell.execute_reply": "2024-04-10T01:25:49.289719Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "34.8 s ± 9.56 s per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%timeit dense_pipeline.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "be280ac3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-10T01:25:49.294364Z",
     "iopub.status.busy": "2024-04-10T01:25:49.293893Z",
     "iopub.status.idle": "2024-04-10T01:27:33.425707Z",
     "shell.execute_reply": "2024-04-10T01:27:33.425127Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13 s ± 1.41 s per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%timeit sparse_pipeline.fit(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7311f47",
   "metadata": {},
   "source": [
    "## Tensorflow Datasets\n",
    "\n",
    "Tensorflow provides a whole suite of functionality around the [Dataset].\n",
    "Datasets are lazily evaluated, can be sparse and minimize the transformations required to feed data into the model.\n",
    "They are _a lot_ more performant and efficient at scale than using numpy datastructures, even sparse ones.\n",
    "\n",
    "SciKeras does not (and cannot) support Datasets directly because Scikit-Learn itself does not support them and SciKeras' outwards API is Scikit-Learn's API.\n",
    "You may want to explore breaking out of SciKeras and just using TensorFlow/Keras directly to see if Datasets can have a large impact for your use case.\n",
    "\n",
    "[Dataset]: https://www.tensorflow.org/api_docs/python/tf/data/Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a837c2d7",
   "metadata": {},
   "source": [
    "## Bonus: dtypes\n",
    "\n",
    "You might be able to save even more memory by changing the output dtype of `OneHotEncoder`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5832202f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-10T01:27:33.428283Z",
     "iopub.status.busy": "2024-04-10T01:27:33.427902Z",
     "iopub.status.idle": "2024-04-10T01:27:33.431187Z",
     "shell.execute_reply": "2024-04-10T01:27:33.430633Z"
    }
   },
   "outputs": [],
   "source": [
    "sparse_pipline_uint8 = Pipeline(\n",
    "    [\n",
    "        (\"encoder\", OneHotEncoder(sparse_output=True, dtype=np.uint8)),\n",
    "        (\"model\", KerasRegressor(get_clf, loss=\"mse\", epochs=5, verbose=False))\n",
    "    ]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d09c035f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-10T01:27:33.433310Z",
     "iopub.status.busy": "2024-04-10T01:27:33.432898Z",
     "iopub.status.idle": "2024-04-10T01:27:46.315882Z",
     "shell.execute_reply": "2024-04-10T01:27:46.315319Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "peak memory: 1087.63 MiB, increment: 15.85 MiB\n"
     ]
    }
   ],
   "source": [
    "%memit sparse_pipline_uint8.fit(X, y)"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
