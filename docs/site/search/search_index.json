{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Introduction"},{"location":"api/","text":"API documentation \uf0c1 class scikeras.wrappers. BaseWrapper ( build_fn=None , * , random_state=None , optimizer='rmsprop' , loss=None , metrics=None , batch_size=None , verbose=1 , callbacks=None , validation_split=0.0 , shuffle=True , run_eagerly=False , **kwargs ) Base class for the Keras scikit-learn wrapper. Warning: This class should not be used directly. Use descendant classes instead. Arguments: build_fn: callable function or class instance Used to build the Keras Model. When called, must return a compiled instance of a Keras Model to be used by fit , predict , etc. random_state : int, RandomState instance, default=None Set the Tensorflow random number generators to a reproducible deterministic state using this seed. Pass an int for reproducible results across multiple function calls. For all other parameters see tf.keras.Model documentation. fit ( self , X , y , sample_weight=None , warm_start=False , **kwargs ) Constructs a new model with build_fn & fit the model to (X, y) . Arguments: X : array-like, shape (n_samples, n_features) Training samples where n_samples is the number of samples and n_features is the number of features. y : array-like, shape (n_samples,) or (n_samples, n_outputs) True labels for X . sample_weight : array-like of shape (n_samples,), default=None Sample weights. The Keras Model must support this. warm_start : bool, default False If warm_start is True, don't rebuild the model. **kwargs: dictionary arguments Legal arguments are the arguments of the keras model's fit method. Returns: self : object a reference to the instance that can be chain called (ex: instance.fit(X,y).transform(X) ) Raises: ValueError : In case of invalid shape for y argument. ValueError : In case sample_weight != None and the Keras model's fit method does not support that parameter. get_params ( self , deep=True ) Get parameters for this estimator. Parameters \uf0c1 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \uf0c1 params : mapping of string to any Parameter names mapped to their values. is_fitted_ bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. partial_fit ( self , X , y , sample_weight=None , **kwargs ) Partially fit a model. Arguments: X : array-like, shape (n_samples, n_features) Training samples where n_samples is the number of samples and n_features is the number of features. y : array-like, shape (n_samples,) or (n_samples, n_outputs) True labels for X . sample_weight : array-like of shape (n_samples,), default=None Sample weights. The Keras Model must support this. **kwargs: dictionary arguments Legal arguments are the arguments of the keras model's fit method. Returns: self : object a reference to the instance that can be chain called (ex: instance.partial_fit(X, y).transform(X) ) Raises: ValueError : In case of invalid shape for y argument. ValuError : In case sample_weight != None and the Keras model's fit method does not support that parameter. postprocess_y ( y ) Handles manipulation of predicted y values. By default, it joins lists of predictions for multi-ouput models into a single numpy array. Subclass and override this method to customize processing. Arguments: y : 2D numpy array or list of numpy arrays (the latter is for multi-ouput models) Returns: y : 2D numpy array with singular dimensions stripped or 1D numpy array extra_args : attributes of output y . predict ( self , X , **kwargs ) Returns predictions for the given test data. Arguments: X: array-like, shape (n_samples, n_features) Test samples where n_samples is the number of samples and n_features is the number of features. **kwargs: dictionary arguments Legal arguments are the arguments of self.model_.predict . Returns: preds: array-like, shape (n_samples,) Predictions. preprocess_X ( X ) Handles manipulation of X before fitting. Subclass and override this method to process X, for example accommodate a multi-input model. Arguments: X : 2D numpy array Returns: X : unchanged 2D numpy array extra_args : attributes of output y . preprocess_y ( y ) Handles manipulation of y inputs to fit or score. By default, this just makes sure y is 2D. Arguments: y : 1D or 2D numpy array Returns: y : numpy array of shape (n_samples, n_ouputs) extra_args : dictionary of output attributes, ex: n_outputs_ score ( self , X , y , sample_weight=None , **kwargs ) Returns the mean accuracy on the given test data and labels. Arguments: X: array-like, shape (n_samples, n_features) Test samples where n_samples is the number of samples and n_features is the number of features. y: array-like, shape (n_samples,) or (n_samples, n_outputs) True labels for X . sample_weight : array-like of shape (n_samples,), default=None Sample weights. The Keras Model must support this. **kwargs: dictionary arguments Legal arguments are those of self.model_.evaluate . Returns: score: float Mean accuracy of predictions on X wrt. y . Raises: ValueError: If the underlying model isn't configured to compute accuracy. You should pass metrics=[\"accuracy\"] to the .compile() method of the model. set_params ( self , **params ) Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as pipelines). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \uf0c1 **params : dict Estimator parameters. Returns \uf0c1 self : object Estimator instance. class scikeras.wrappers. KerasClassifier ( build_fn=None , * , random_state=None , optimizer='rmsprop' , loss=None , metrics=None , batch_size=None , verbose=1 , callbacks=None , validation_split=0.0 , shuffle=True , run_eagerly=False , **kwargs ) Implementation of the scikit-learn classifier API for Keras. fit ( self , X , y , sample_weight=None , warm_start=False , **kwargs ) Constructs a new model with build_fn & fit the model to (X, y) . Arguments: X : array-like, shape (n_samples, n_features) Training samples where n_samples is the number of samples and n_features is the number of features. y : array-like, shape (n_samples,) or (n_samples, n_outputs) True labels for X . sample_weight : array-like of shape (n_samples,), default=None Sample weights. The Keras Model must support this. warm_start : bool, default False If warm_start is True, don't rebuild the model. **kwargs: dictionary arguments Legal arguments are the arguments of the keras model's fit method. Returns: self : object a reference to the instance that can be chain called (ex: instance.fit(X,y).transform(X) ) Raises: ValueError : In case of invalid shape for y argument. ValueError : In case sample_weight != None and the Keras model's fit method does not support that parameter. get_params ( self , deep=True ) Get parameters for this estimator. Parameters \uf0c1 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \uf0c1 params : mapping of string to any Parameter names mapped to their values. is_fitted_ bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. partial_fit ( self , X , y , sample_weight=None , **kwargs ) Partially fit a model. Arguments: X : array-like, shape (n_samples, n_features) Training samples where n_samples is the number of samples and n_features is the number of features. y : array-like, shape (n_samples,) or (n_samples, n_outputs) True labels for X . sample_weight : array-like of shape (n_samples,), default=None Sample weights. The Keras Model must support this. **kwargs: dictionary arguments Legal arguments are the arguments of the keras model's fit method. Returns: self : object a reference to the instance that can be chain called (ex: instance.partial_fit(X, y).transform(X) ) Raises: ValueError : In case of invalid shape for y argument. ValuError : In case sample_weight != None and the Keras model's fit method does not support that parameter. postprocess_y ( self , y ) Reverts _pre_process_inputs to return predicted probabilites in formats sklearn likes as well as retrieving the original classes. predict ( self , X , **kwargs ) Returns predictions for the given test data. Arguments: X: array-like, shape (n_samples, n_features) Test samples where n_samples is the number of samples and n_features is the number of features. **kwargs: dictionary arguments Legal arguments are the arguments of self.model_.predict . Returns: preds: array-like, shape (n_samples,) Predictions. predict_proba ( self , X , **kwargs ) Returns class probability estimates for the given test data. Arguments: X: array-like, shape (n_samples, n_features) Test samples where n_samples is the number of samples and n_features is the number of features. **kwargs: dictionary arguments Legal arguments are the arguments of Sequential.predict_classes . Returns: proba: array-like, shape (n_samples, n_outputs) Class probability estimates. In the case of binary classification, to match the scikit-learn API, will return an array of shape (n_samples, 2) (instead of (n_sample, 1) as in Keras). preprocess_X ( X ) Handles manipulation of X before fitting. Subclass and override this method to process X, for example accommodate a multi-input model. Arguments: X : 2D numpy array Returns: X : unchanged 2D numpy array extra_args : attributes of output y . preprocess_y ( y ) Handles manipulation of y inputs to fit or score. For KerasClassifier, this handles interpreting classes from y . Arguments: y : 1D or 2D numpy array Returns: y : modified 2D numpy array with 0 indexed integer class labels. extra_args : dictionary of output attributes, ex n_outputs_ score ( self , X , y , sample_weight=None , **kwargs ) Returns the mean accuracy on the given test data and labels. Arguments: X: array-like, shape (n_samples, n_features) Test samples where n_samples is the number of samples and n_features is the number of features. y: array-like, shape (n_samples,) or (n_samples, n_outputs) True labels for X . sample_weight : array-like of shape (n_samples,), default=None Sample weights. The Keras Model must support this. **kwargs: dictionary arguments Legal arguments are those of self.model_.evaluate . Returns: score: float Mean accuracy of predictions on X wrt. y . Raises: ValueError: If the underlying model isn't configured to compute accuracy. You should pass metrics=[\"accuracy\"] to the .compile() method of the model. set_params ( self , **params ) Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as pipelines). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \uf0c1 **params : dict Estimator parameters. Returns \uf0c1 self : object Estimator instance. class scikeras.wrappers. KerasRegressor ( build_fn=None , * , random_state=None , optimizer='rmsprop' , loss=None , metrics=None , batch_size=None , verbose=1 , callbacks=None , validation_split=0.0 , shuffle=True , run_eagerly=False , **kwargs ) Implementation of the scikit-learn regressor API for Keras. fit ( self , X , y , sample_weight=None , warm_start=False , **kwargs ) Constructs a new model with build_fn & fit the model to (X, y) . Arguments: X : array-like, shape (n_samples, n_features) Training samples where n_samples is the number of samples and n_features is the number of features. y : array-like, shape (n_samples,) or (n_samples, n_outputs) True labels for X . sample_weight : array-like of shape (n_samples,), default=None Sample weights. The Keras Model must support this. warm_start : bool, default False If warm_start is True, don't rebuild the model. **kwargs: dictionary arguments Legal arguments are the arguments of the keras model's fit method. Returns: self : object a reference to the instance that can be chain called (ex: instance.fit(X,y).transform(X) ) Raises: ValueError : In case of invalid shape for y argument. ValueError : In case sample_weight != None and the Keras model's fit method does not support that parameter. get_params ( self , deep=True ) Get parameters for this estimator. Parameters \uf0c1 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \uf0c1 params : mapping of string to any Parameter names mapped to their values. is_fitted_ bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed. partial_fit ( self , X , y , sample_weight=None , **kwargs ) Partially fit a model. Arguments: X : array-like, shape (n_samples, n_features) Training samples where n_samples is the number of samples and n_features is the number of features. y : array-like, shape (n_samples,) or (n_samples, n_outputs) True labels for X . sample_weight : array-like of shape (n_samples,), default=None Sample weights. The Keras Model must support this. **kwargs: dictionary arguments Legal arguments are the arguments of the keras model's fit method. Returns: self : object a reference to the instance that can be chain called (ex: instance.partial_fit(X, y).transform(X) ) Raises: ValueError : In case of invalid shape for y argument. ValuError : In case sample_weight != None and the Keras model's fit method does not support that parameter. postprocess_y ( self , y ) Ensures output is floatx and squeeze. predict ( self , X , **kwargs ) Returns predictions for the given test data. Arguments: X: array-like, shape (n_samples, n_features) Test samples where n_samples is the number of samples and n_features is the number of features. **kwargs: dictionary arguments Legal arguments are the arguments of self.model_.predict . Returns: preds: array-like, shape (n_samples,) Predictions. preprocess_X ( X ) Handles manipulation of X before fitting. Subclass and override this method to process X, for example accommodate a multi-input model. Arguments: X : 2D numpy array Returns: X : unchanged 2D numpy array extra_args : attributes of output y . preprocess_y ( self , y ) Split y for multi-output tasks. r_squared ( y_true , y_pred ) A simple Keras implementation of R^2 that can be used as a Keras loss function. Since ScikitLearn's score uses R^2 by default, it is advisable to use the same loss/metric when optimizing the model. score ( self , X , y , sample_weight=None , **kwargs ) Returns the mean loss on the given test data and labels. Arguments: X: array-like, shape (n_samples, n_features) Test samples where n_samples is the number of samples and n_features is the number of features. y: array-like, shape (n_samples,) True labels for X . **kwargs: dictionary arguments Legal arguments are the arguments of Sequential.evaluate . Returns: score: float Mean accuracy of predictions on X wrt. y . set_params ( self , **params ) Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as pipelines). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \uf0c1 **params : dict Estimator parameters. Returns \uf0c1 self : object Estimator instance.","title":"API Details"},{"location":"api/#api-documentation","text":"class scikeras.wrappers. BaseWrapper ( build_fn=None , * , random_state=None , optimizer='rmsprop' , loss=None , metrics=None , batch_size=None , verbose=1 , callbacks=None , validation_split=0.0 , shuffle=True , run_eagerly=False , **kwargs ) Base class for the Keras scikit-learn wrapper. Warning: This class should not be used directly. Use descendant classes instead. Arguments: build_fn: callable function or class instance Used to build the Keras Model. When called, must return a compiled instance of a Keras Model to be used by fit , predict , etc. random_state : int, RandomState instance, default=None Set the Tensorflow random number generators to a reproducible deterministic state using this seed. Pass an int for reproducible results across multiple function calls. For all other parameters see tf.keras.Model documentation. fit ( self , X , y , sample_weight=None , warm_start=False , **kwargs ) Constructs a new model with build_fn & fit the model to (X, y) . Arguments: X : array-like, shape (n_samples, n_features) Training samples where n_samples is the number of samples and n_features is the number of features. y : array-like, shape (n_samples,) or (n_samples, n_outputs) True labels for X . sample_weight : array-like of shape (n_samples,), default=None Sample weights. The Keras Model must support this. warm_start : bool, default False If warm_start is True, don't rebuild the model. **kwargs: dictionary arguments Legal arguments are the arguments of the keras model's fit method. Returns: self : object a reference to the instance that can be chain called (ex: instance.fit(X,y).transform(X) ) Raises: ValueError : In case of invalid shape for y argument. ValueError : In case sample_weight != None and the Keras model's fit method does not support that parameter. get_params ( self , deep=True ) Get parameters for this estimator.","title":"API documentation"},{"location":"contributing/","text":"","title":"Contributing"},{"location":"faq/","text":"","title":"FAQ"},{"location":"quickstart/","text":"","title":"Quickstart"},{"location":"wrappers/","text":"","title":"Wrapper API Overview"}]}