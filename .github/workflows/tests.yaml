name: Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  Linting:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v1
      
      - name: Update packages
        run: |
          pip install -U pip wheel

      - uses: pre-commit/action@v2.0.0

  TestStable:
    needs: Linting
    name: Ubuntu / Python ${{ matrix.python-version }} / TensorFlow Stable / Scikit-Learn Stable
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install and Set Up Poetry
        run: |
          python -m pip install --upgrade poetry
          poetry config virtualenvs.in-project true
          poetry run python -m pip install --upgrade pip pytest-sugar

      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: poetry-${{ hashFiles('**/pyproject.toml') }}-stable-${{ matrix.python-version }}-${{ matrix.os }}
          restore-keys: |
            poetry-${{ hashFiles('**/pyproject.toml') }}-stable-${{ matrix.python-version }}-${{ matrix.os }}

      - name: Install Dependencies
        run: |
          poetry install
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Update Packages
        run: |
          poetry update

      - name: Test with pytest 
        run: |
          poetry show
          poetry run python -m pytest -v --cov=scikeras --cov-report xml --numprocesses=auto

      - uses: codecov/codecov-action@v1

  TestDev:
    needs: Linting
    name: Ubuntu / Python ${{ matrix.python-version }} / TensorFlow Nightly / Scikit-Learn Nightly
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install and Set Up Poetry
        run: |
          python -m pip install --upgrade poetry
          poetry config virtualenvs.in-project true
          poetry run python -m pip install --upgrade pip pytest-sugar

      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: poetry-${{ hashFiles('**/pyproject.toml') }}-nightly-${{ matrix.python-version }}-${{ matrix.os }}
          restore-keys: |
            poetry-${{ hashFiles('**/pyproject.toml') }}-nightly-${{ matrix.python-version }}-${{ matrix.os }}

      - name: Install Dependencies
        run: |
          poetry remove tensorflow
          poetry remove scikit-learn
          poetry install
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Update Packages
        run: |
          # Avoid updating nightly -> stable
          poetry run python -m pip uninstall -y tf-nightly
          poetry run python -m pip uninstall -y tensorflow
          poetry run python -m pip uninstall -y scikit-learn
          poetry update

      - name: Install Nightly Versions
        run: |
          poetry run python -m pip uninstall -y tf-nightly
          poetry run python -m pip uninstall -y tensorflow
          poetry run python -m pip uninstall -y scikit-learn
          poetry run python -m pip install -U tf-nightly
          poetry run python -m pip install -U --pre --extra-index https://pypi.anaconda.org/scipy-wheels-nightly/simple scikit-learn

      - name: Test with pytest 
        run: |
          poetry show
          poetry run python -m pytest -v --cov=scikeras --cov-report xml --numprocesses=auto

      - uses: codecov/codecov-action@v1

  TestOldest:
    needs: Linting
    name: Ubuntu / Python ${{ matrix.python-version }} / TF ${{ matrix.tf-version }} / Scikit-Learn ${{ matrix.sklearn-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tf-version: [2.2.0]
        python-version: [3.6, 3.8]
        sklearn-version: [0.22.0]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install and Set Up Poetry
        run: |
          python -m pip install --upgrade poetry
          poetry config virtualenvs.in-project true
          poetry run python -m pip install --upgrade pip pytest-sugar

      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: poetry-${{ hashFiles('**/pyproject.toml') }}-${{matrix.tf-version}}-${{ matrix.python-version }}-${{ matrix.os }}
          restore-keys: |
            poetry-${{ hashFiles('**/pyproject.toml') }}-${{matrix.tf-version}}-${{ matrix.python-version }}-${{ matrix.os }}

      - name: Install Dependencies
        run: |
          poetry install
          poetry run python -m pip uninstall -y tensorflow
          poetry run python -m pip install tensorflow==${{matrix.tf-version}}
          poetry run python -m pip uninstall -y scikit-learn
          poetry run python -m pip install scikit-learn==${{matrix.sklearn-version}}
        if: steps.cache.outputs.cache-hit != 'true'      

      - name: Test with pytest 
        run: |
          poetry show
          poetry run python -m pytest -v --cov=scikeras --cov-report xml --numprocesses=auto

      - uses: codecov/codecov-action@v1

  TestOSs:
    needs: Linting
    name: ${{ matrix.os }} / Python ${{ matrix.python-version }} / TF Stable / Scikit-Learn Stable
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [MacOS, Windows]  # test all OSs (except Ubuntu, which is already running other tests)
        python-version: [3.6.7, 3.8.5]  # test only the two extremes of supported Python versions

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install and Set Up Poetry
        shell: bash
        run: |
          pip install --upgrade poetry
          poetry config virtualenvs.in-project true
          poetry run python -m pip install --upgrade pip pytest-sugar

      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: poetry-${{ hashFiles('**/pyproject.toml') }}-${{ matrix.python-version }}-${{ matrix.os }}
          restore-keys: |
            poetry-${{ hashFiles('**/pyproject.toml') }}-${{ matrix.python-version }}-${{ matrix.os }}

      - name: Install Dependencies
        run: |
          poetry install
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Test with pytest
        run: |
          poetry show
          poetry run python -m pytest -v --cov=scikeras --cov-report xml --numprocesses=auto

      - uses: codecov/codecov-action@v1
