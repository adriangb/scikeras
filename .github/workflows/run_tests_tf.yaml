name: Test Python & TF Versions

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  Linting:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Linting
        run: |
          pip install pre-commit
          pre-commit run --all-files

  Tests:
    needs: Linting
    name: TF v${{ matrix.tf-version }} / ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tf-version: [2.2.0, 2.3.0]
        python-version: [3.6, 3.7, 3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install and Set Up Poetry
        run: |
          pip install --upgrade poetry
          poetry config virtualenvs.in-project true
          poetry run python -m pip install --upgrade pip

      - name: Cache Poetry virtualenv
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: poetry-${{ hashFiles('**/pyproject.toml') }}-${{matrix.tf-version}}
          restore-keys: |
            poetry-${{ hashFiles('**/pyproject.toml') }}-${{matrix.tf-version}}

      - name: Install Dependencies
        run: |
          yes | poetry cache clear pypi --all
          poetry install
          poetry add 'tensorflow==${{matrix.tf-version}}'
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Test with pytest 
        run: |
          poetry run python -m pytest -v --cov-report xml:coverage.xml --cov=scikeras --cov-append

      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: true
          flags: ubuntu-latest-${{ matrix.python-version }}-${{ matrix.tf-version }}
